# Copyright 2019-present Open Networking Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
{{$log_level := tpl .Values.rw_core.log_level . | upper }}
---
apiVersion: v1
kind: Service
metadata:
  name: voltha-api
  serviceAccountName: {{ .Values.serviceaccount }}
spec:
  serviceAccountName: {{ .Values.serviceaccount }}
  ports:
    - name: grpc
      port: 55555
      targetPort: 50057
  selector:
    app: rw-core
---
apiVersion: v1
kind: Service
metadata:
  name: voltha-rw-core
  serviceAccountName: {{ .Values.serviceaccount }}
spec:
  serviceAccountName: {{ .Values.serviceaccount }}
  clusterIP: None
  ports:
    - name: grpc
      port: 50057
      targetPort: 50057
  selector:
    app: rw-core
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: voltha-rw-core
  serviceAccountName: {{ .Values.serviceaccount }}
  {{- if or (hasKey .Values "extra_deployment_labels") (hasKey .Values "rw_core_deployment_labels") }}
  labels:
    {{- if hasKey .Values "extra_deployment_labels" }}
    {{- range $key, $val := .Values.extra_deployment_labels }}
    {{ $key }}: {{ $val | quote }}
    {{- end }}
    {{- end }}
    {{- if hasKey .Values "rw_core_deployment_labels" }}
    {{- range $key, $val := .Values.rw_core_deployment_labels }}
    {{ $key }}: {{ $val | quote }}
    {{- end }}
    {{- end }}
  {{- end }}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: rw-core
        app.kubernetes.io/name: "read-write-core"
        app.kubernetes.io/version: {{ quote .Chart.AppVersion }}
        app.kubernetes.io/component: "core"
        app.kubernetes.io/part-of: "voltha"
        app.kubernetes.io/managed-by: {{ quote .Release.Service }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        {{- if hasKey .Values "extra_pod_labels" }}
        {{- range $key, $val := .Values.extra_pod_labels }}
        {{ $key }}: {{ $val | quote }}
        {{- end }}
        {{- end }}
        {{- if hasKey .Values "rw_core_pod_labels" }}
        {{- range $key, $val := .Values.rw_core_pod_labels }}
        {{ $key }}: {{ $val | quote }}
        {{- end }}
        {{- end }}
      annotations:
        cni: "calico"
    spec:
      serviceAccountName: {{ .Values.serviceaccount }}
      containers:
        - name: voltha
          image: '{{ tpl .Values.images.rw_core.registry . }}{{ tpl .Values.images.rw_core.repository . }}:{{ tpl .Values.images.rw_core.tag . }}'
          imagePullPolicy: {{ tpl .Values.images.rw_core.pullPolicy . }}
          env:
            - name: NAMESPACE
              value: voltha
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          args:
            - "/app/rw_core"
            - "-kv_store_type=etcd"
            - "-kv_store_host={{ .Values.services.etcd.service }}"
            - "-kv_store_port={{ .Values.services.etcd.port }}"
            - "-grpc_host=0.0.0.0"
            - "-grpc_port=50057"
            - "-banner=true"
            - "-kafka_adapter_host={{ .Values.services.kafka.adapter.service }}"
            - "-kafka_adapter_port={{ .Values.services.kafka.adapter.port }}"
            - "-kafka_cluster_host={{ .Values.services.kafka.cluster.port }}"
            - "-kafka_cluster_port={{ .Values.services.kafka.cluster.port }}"
            - "-rw_core_topic=rwcore"
            - "-core_pair_topic=core-pair-1"
            - "-kv_store_data_prefix=service/voltha"
            - "-in_competing_mode=false"
            - "-core_timeout=9999"
            - "-timeout_long_request=9999"
            - "-timeout_request=9999"
            - "-log_level={{ $log_level }}"
            - "-probe_port=8080"
          ports:
            - containerPort: 50057
              name: grpc
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /readz
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 3

